/**
 * Production Seed Script - Kazakhstan Edition
 * –ü–æ–ª–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
 * Solana SuperApp
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üá∞üáø Starting Kazakhstan production database seeding...')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã
    await createAssets()
    
    // 2. –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã –∏ —É—Ä–æ–∫–∏
    await createCoursesAndLessons()
    
    // 3. –°–æ–∑–¥–∞–µ–º NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    await createNFTCollections()
    
    // 4. –°–æ–∑–¥–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
    await createJobsAndVacancies()
    
    // 5. –°–æ–∑–¥–∞–µ–º DeFi –ø—É–ª—ã
    await createDeFiPools()
    
    // 6. –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∑–Ω–∞—á–∫–∏
    await createAchievementsAndBadges()
    
    // 7. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await createTestUsers()
    
    // 8. –°–æ–∑–¥–∞–µ–º DAO –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await createDAOProposals()

    console.log('‚úÖ Kazakhstan production seeding completed successfully!')
  } catch (error) {
    console.error('‚ùå Error during seeding:', error)
    throw error
  }
}

async function createAssets() {
  console.log('üí∞ Creating Kazakhstan assets...')
  
  // SOL - –±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω
  await prisma.asset.upsert({
    where: { symbol: 'SOL' },
    update: {},
    create: {
      symbol: 'SOL',
      name: 'Solana',
      mintAddress: null,
      decimals: 9,
      isOnchain: true,
      logoUrl: 'https://cryptologos.cc/logos/solana-sol-logo.png',
      description: '–ù–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –±–ª–æ–∫—á–µ–π–Ω–∞ Solana',
      isActive: true
    }
  })

  // TNG - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –¢–µ–Ω–≥–µ —Ç–æ–∫–µ–Ω
  await prisma.asset.upsert({
    where: { symbol: 'TNG' },
    update: {},
    create: {
      symbol: 'TNG',
      name: 'Kazakhstan Tenge Token',
      mintAddress: process.env.TNG_MINT_ADDRESS || 'FMACx4PexHrMux1j2RLHW6fBc5PuCrzi2LV7bEqUKygs',
      decimals: 9,
      isOnchain: true,
      logoUrl: '/tng-logo.png',
      description: '–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–∫–µ–Ω, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–º—É —Ç–µ–Ω–≥–µ (1 TNG = 1 KZT)',
      isActive: true
    }
  })

  // USDC - –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  await prisma.asset.upsert({
    where: { symbol: 'USDC' },
    update: {},
    create: {
      symbol: 'USDC',
      name: 'USD Coin',
      mintAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
      decimals: 6,
      isOnchain: true,
      logoUrl: 'https://cryptologos.cc/logos/usd-coin-usdc-logo.png',
      description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê',
      isActive: true
    }
  })

  // –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (1 USD = 450 KZT –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
  const solAsset = await prisma.asset.findUnique({ where: { symbol: 'SOL' } })
  const tngAsset = await prisma.asset.findUnique({ where: { symbol: 'TNG' } })
  const usdcAsset = await prisma.asset.findUnique({ where: { symbol: 'USDC' } })

  if (solAsset && tngAsset) {
    await prisma.rate.upsert({
      where: { 
        baseAssetId_quoteAssetId_timestamp: {
          baseAssetId: solAsset.id,
          quoteAssetId: tngAsset.id,
          timestamp: new Date()
        }
      },
      update: {},
      create: {
        baseAssetId: solAsset.id,
        quoteAssetId: tngAsset.id,
        rate: 44325, // 1 SOL ‚âà 44,325 TNG (98.5 USD * 450 KZT)
        source: 'MANUAL',
        provider: 'Kazakhstan Central Bank',
        confidence: 0.95,
        timestamp: new Date()
      }
    })
  }
}

async function createCoursesAndLessons() {
  console.log('üìö Creating Kazakhstan blockchain courses...')

  // –ö—É—Ä—Å 1: –û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
  const blockchainBasics = await prisma.course.create({
    data: {
      id: 'course-blockchain-kz-basics',
      title: '–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
      description: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. –£–∑–Ω–∞–π—Ç–µ –æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ–Ω–≥–µ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è —Ñ–∏–Ω—Ç–µ—Ö–∞ –≤ —Å—Ç—Ä–∞–Ω–µ.',
      shortDescription: '–ë–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
      category: 'BLOCKCHAIN',
      level: 'BEGINNER',
      duration: 180,
      estimatedTime: 180,
      totalRewardTokens: 1000,
      certificateAvailable: true,
      coverImage: '/courses/kz-blockchain-basics.jpg',
      learningObjectives: [
        '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        '–ó–Ω–∞–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
        '–£–º–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏',
        '–ü–æ–Ω–∏–º–∞–Ω–∏–µ DeFi –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'
      ],
      prerequisites: ['–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞', '–£–º–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏'],
      isActive: true,
      isFeatured: true,
      isPopular: true,
      studentsCount: 245,
      rating: 4.7,
      createdBy: 'system'
    }
  })

  // –£—Ä–æ–∫–∏ –¥–ª—è –∫—É—Ä—Å–∞ –æ—Å–Ω–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞
  const lessons1 = [
    {
      title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
      description: '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –º–∏—Ä–µ –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏.',
      type: 'VIDEO',
      order: 1,
      duration: 25,
      content: `# –ë–ª–æ–∫—á–µ–π–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
      
–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã "–¶–∏—Ñ—Ä–æ–≤–æ–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω".

## –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:
- –¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–Ω–≥–µ (CBDC) - —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞
- –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞
- –†–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–Ω—Ç–µ—Ö —Å–µ–∫—Ç–æ—Ä–∞
- Blockchain-based —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ

## –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞:
- –ó–∞–∫–æ–Ω "–û –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"
- –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ù–ë–†–ö –æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö
- –ù–∞–ª–æ–≥–æ–≤–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–π`,
      xpReward: 50,
      tokenReward: 100
    },
    {
      title: '–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–Ω–≥–µ –∏ CBDC',
      description: '–ü—Ä–æ–µ–∫—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–µ–Ω–≥–µ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –û—Ç–ª–∏—á–∏—è –æ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.',
      type: 'VIDEO',
      order: 2,
      duration: 30,
      content: `# –¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–Ω–≥–µ (Digital Tenge)
      
–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ (CBDC).

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–µ–Ω–≥–µ:
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –ù–ë–†–ö
- –û–±–µ—Å–ø–µ—á–µ–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π blockchain –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç—Ä–∞–Ω—ã

## –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã 24/7
- –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
- –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å`,
      xpReward: 75,
      tokenReward: 150
    },
    {
      title: '–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –†–ö',
      description: '–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º, –º–∞–π–Ω–∏–Ω–≥—É –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º –∞–∫—Ç–∏–≤–∞–º.',
      type: 'TEXT',
      order: 3,
      duration: 20,
      content: `# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
      
## –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
- –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ù–ï —è–≤–ª—è—é—Ç—Å—è –∑–∞–∫–æ–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –ø–ª–∞—Ç–µ–∂–∞
- –†–∞–∑—Ä–µ—à–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—Ä–∏–ø—Ç–æ –∫–∞–∫ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
- –ú–∞–π–Ω–∏–Ω–≥ –ª–µ–≥–∞–ª–∏–∑–æ–≤–∞–Ω —Å 2020 –≥–æ–¥–∞
- –ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–∏–ø—Ç–æ

## –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:
- –û–±–º–µ–Ω–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –ê–§–†–ö
- –ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ú–∏–Ω—ç–Ω–µ—Ä–≥–æ
- –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—é

## –ù–∞–ª–æ–≥–∏:
- –ò–ü–ù —Å –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ
- –ö–ü–ù –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
- –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –ù–î–°`,
      xpReward: 60,
      tokenReward: 120
    }
  ]

  for (const [index, lessonData] of lessons1.entries()) {
    await prisma.lesson.create({
      data: {
        courseId: blockchainBasics.id,
        ...lessonData,
        order: index + 1
      }
    })
  }

  // –ö—É—Ä—Å 2: DeFi –∏ —Ñ–∏–Ω—Ç–µ—Ö –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ  
  const defiKazakhstan = await prisma.course.create({
    data: {
      id: 'course-defi-kz',
      title: 'DeFi –∏ —Ñ–∏–Ω—Ç–µ—Ö –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
      description: '–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã (DeFi) –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞. –ò–∑—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞, —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è –≤ –∫—Ä–∏–ø—Ç–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ.',
      shortDescription: 'DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ —Ñ–∏–Ω—Ç–µ—Ö —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
      category: 'DEFI',
      level: 'INTERMEDIATE',
      duration: 240,
      estimatedTime: 240,
      totalRewardTokens: 1500,
      certificateAvailable: true,
      coverImage: '/courses/kz-defi.jpg',
      learningObjectives: [
        '–ü–æ–Ω–∏–º–∞–Ω–∏–µ DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤',
        '–ù–∞–≤—ã–∫–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞',
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –≤ DeFi',
        '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –±–∞–Ω–∫–∏–Ω–≥–æ–º'
      ],
      prerequisites: ['–ó–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏'],
      isActive: true,
      isFeatured: true,
      studentsCount: 156,
      rating: 4.5,
      createdBy: 'system'
    }
  })

  // –ö—É—Ä—Å 3: NFT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
  const nftKazakhstan = await prisma.course.create({
    data: {
      id: 'course-nft-kz-art',
      title: 'NFT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ–¥–∞–∂–∞ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ NFT —Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π. –ò–∑—É—á–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É blockchain —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.',
      shortDescription: 'NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
      category: 'NFT',
      level: 'BEGINNER',
      duration: 150,
      estimatedTime: 150,
      totalRewardTokens: 800,
      certificateAvailable: true,
      coverImage: '/courses/kz-nft-art.jpg',
      learningObjectives: [
        '–°–æ–∑–¥–∞–Ω–∏–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–π',
        '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤',
        '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ NFT –ø—Ä–æ–µ–∫—Ç–æ–≤',
        '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è'
      ],
      prerequisites: ['–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏', '–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞'],
      isActive: true,
      studentsCount: 89,
      rating: 4.3,
      createdBy: 'system'
    }
  })

  console.log('‚úÖ Created Kazakhstan courses and lessons')
}

async function createNFTCollections() {
  console.log('üé® Creating Kazakhstan NFT collections...')

  // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è NFT
  const systemUser = await prisma.user.upsert({
    where: { telegramId: BigInt(1) },
    update: {},
    create: {
      telegramId: BigInt(1),
      username: 'system',
      firstName: 'System',
      lastName: 'Creator',
      languageCode: 'ru',
      isPremium: true
    }
  })

  // –ö–æ–ª–ª–µ–∫—Ü–∏—è 1: –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const landmarksCollection = await prisma.nFTCollection.create({
    data: {
      name: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
      description: '–¶–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∑–Ω–∞–∫–æ–≤—ã—Ö –º–µ—Å—Ç –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
      slug: 'kazakhstan-landmarks',
      imageUri: '/nft/collections/kz-landmarks.jpg',
      bannerUri: '/nft/collections/kz-landmarks-banner.jpg',
      creatorId: systemUser.id,
      isVerified: true,
      totalSupply: 20,
      floorPrice: BigInt(500000000000) // 500 TNG
    }
  })

  // NFT –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
  const landmarks = [
    { name: '–ë–∞–π—Ç–µ—Ä–µ–∫', description: '–°–∏–º–≤–æ–ª —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ù—É—Ä-–°—É–ª—Ç–∞–Ω–∞', price: BigInt(1000000000000) },
    { name: '–•–∞–Ω –®–∞—Ç—ã—Ä', description: '–ö—Ä—É–ø–Ω–µ–π—à–∏–π —à–∞—Ç–µ—Ä –≤ –º–∏—Ä–µ', price: BigInt(800000000000) },
    { name: '–ú–∞–≤–∑–æ–ª–µ–π –•–æ–¥–∂–∏ –ê—Ö–º–µ–¥–∞ –Ø—Å–∞—É–∏', description: '–ñ–µ–º—á—É–∂–∏–Ω–∞ –¢—É—Ä–∫–µ—Å—Ç–∞–Ω–∞', price: BigInt(1200000000000) },
    { name: '–ß–∞—Ä—ã–Ω—Å–∫–∏–π –∫–∞–Ω—å–æ–Ω', description: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –ì—Ä–∞–Ω–¥ –ö–∞–Ω—å–æ–Ω', price: BigInt(900000000000) },
    { name: '–û–∑–µ—Ä–æ –ë–∞–ª—Ö–∞—à', description: '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª—É–ø—Ä–µ—Å–Ω–æ–≤–æ–¥–Ω–æ–µ –æ–∑–µ—Ä–æ', price: BigInt(700000000000) }
  ]

  for (const landmark of landmarks) {
    await prisma.nFT.create({
      data: {
        name: landmark.name,
        description: landmark.description,
        imageUri: `/nft/landmarks/${landmark.name.toLowerCase().replace(/\s+/g, '-')}.jpg`,
        type: 'ART',
        status: 'FOR_SALE',
        collectionId: landmarksCollection.id,
        ownerId: systemUser.id,
        creatorId: systemUser.id,
        isForSale: true,
        price: landmark.price,
        currency: 'TNG'
      }
    })
  }

  // –ö–æ–ª–ª–µ–∫—Ü–∏—è 2: –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  const symbolsCollection = await prisma.nFTCollection.create({
    data: {
      name: '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
      description: '–ì–µ—Ä–∞–ª—å–¥–∏–∫–∞, –æ—Ä–Ω–∞–º–µ–Ω—Ç—ã –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –Ω–∞—Ä–æ–¥–∞',
      slug: 'kazakhstan-symbols',
      imageUri: '/nft/collections/kz-symbols.jpg',
      bannerUri: '/nft/collections/kz-symbols-banner.jpg',
      creatorId: systemUser.id,
      isVerified: true,
      totalSupply: 15,
      floorPrice: BigInt(600000000000) // 600 TNG
    }
  })

  console.log('‚úÖ Created Kazakhstan NFT collections')
}

async function createJobsAndVacancies() {
  console.log('üíº Creating Kazakhstan job opportunities...')

  const systemUser = await prisma.user.findUnique({ where: { telegramId: BigInt(1) } })

  if (!systemUser) return

  const jobs = [
    {
      title: 'Blockchain —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–ê–ª–º–∞—Ç—ã)',
      description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –Ω–∞ Solana. –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –æ—Ñ–∏—Å–æ–º –≤ –ê–ª–º–∞—Ç—ã.',
      requirements: [
        '–û–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Rust/JavaScript',
        '–ó–Ω–∞–Ω–∏–µ Solana/Anchor framework', 
        '–ü–æ–Ω–∏–º–∞–Ω–∏–µ DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤',
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ - —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å'
      ],
      skills: ['Rust', 'Solana', 'DeFi', 'Smart Contracts', 'JavaScript'],
      paymentAmount: BigInt(800000000000000), // 800,000 TNG (800k KZT)
      paymentToken: 'TNG',
      paymentType: 'FIXED' as const,
      category: 'DEVELOPMENT' as const,
      location: '–ê–ª–º–∞—Ç—ã (–≥–∏–±—Ä–∏–¥)',
      estimatedTime: '3 –º–µ—Å—è—Ü–∞'
    },
    {
      title: '–§–∏–Ω—Ç–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫ (–ù—É—Ä-–°—É–ª—Ç–∞–Ω)',
      description: '–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.',
      requirements: [
        '–í—ã—Å—à–µ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        '–û–ø—ã—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤',
        '–ó–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ DeFi',
        '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ'
      ],
      skills: ['Financial Analysis', 'DeFi', 'Market Research', 'Excel', 'Python'],
      paymentAmount: BigInt(600000000000000), // 600,000 TNG
      paymentToken: 'TNG', 
      paymentType: 'FIXED' as const,
      category: 'CONSULTING' as const,
      location: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω',
      estimatedTime: '2 –º–µ—Å—è—Ü–∞'
    },
    {
      title: 'NFT —Ö—É–¥–æ–∂–Ω–∏–∫ (–£–¥–∞–ª–µ–Ω–Ω–æ)',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π –¥–ª—è NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.',
      requirements: [
        '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞',
        '–ó–Ω–∞–Ω–∏–µ –∫–∞–∑–∞—Ö—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏',
        '–ù–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ Photoshop/Illustrator',
        '–ü–æ–Ω–∏–º–∞–Ω–∏–µ NFT —Ç—Ä–µ–Ω–¥–æ–≤'
      ],
      skills: ['Digital Art', 'NFT Design', 'Photoshop', 'Cultural Knowledge'],
      paymentAmount: BigInt(400000000000000), // 400,000 TNG
      paymentToken: 'TNG',
      paymentType: 'MILESTONE' as const, 
      category: 'DESIGN' as const,
      location: '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
      estimatedTime: '6 –Ω–µ–¥–µ–ª—å'
    },
    {
      title: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ (–®—ã–º–∫–µ–Ω—Ç)',
      description: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ blockchain –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–º —Ä—ã–Ω–∫–µ. –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º–∏.',
      requirements: [
        '–û–ø—ã—Ç –≤ digital marketing',
        '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞',
        '–ó–Ω–∞–Ω–∏–µ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤',
        '–ù–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏'
      ],
      skills: ['Marketing', 'Social Media', 'Crypto', 'Community Management'],
      paymentAmount: BigInt(500000000000000), // 500,000 TNG
      paymentToken: 'TNG',
      paymentType: 'FIXED' as const,
      category: 'MARKETING' as const,
      location: '–®—ã–º–∫–µ–Ω—Ç',
      estimatedTime: '4 –º–µ—Å—è—Ü–∞'
    }
  ]

  for (const jobData of jobs) {
    await prisma.job.create({
      data: {
        ...jobData,
        userId: systemUser.id,
        status: 'OPEN'
      }
    })
  }

  console.log('‚úÖ Created Kazakhstan job opportunities')
}

async function createDeFiPools() {
  console.log('üè¶ Creating Kazakhstan DeFi pools...')

  // –°—Ç–µ–π–∫–∏–Ω–≥ –ø—É–ª—ã —Å TNG
  const stakingPools = [
    {
      name: 'TNG –°—Ç–µ–π–∫–∏–Ω–≥ –ü—É–ª',
      description: '–ë–∞–∑–æ–≤—ã–π —Å—Ç–µ–π–∫–∏–Ω–≥ –ø—É–ª –¥–ª—è TNG —Ç–æ–∫–µ–Ω–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º APY',
      tokenMint: process.env.TNG_MINT_ADDRESS || 'FMACx4PexHrMux1j2RLHW6fBc5PuCrzi2LV7bEqUKygs',
      rewardMint: process.env.TNG_MINT_ADDRESS || 'FMACx4PexHrMux1j2RLHW6fBc5PuCrzi2LV7bEqUKygs',
      apy: 12.5, // 12.5% –≥–æ–¥–æ–≤—ã—Ö
      minimumStake: BigInt(10000000000000), // 10,000 TNG
      lockupPeriod: 30, // 30 –¥–Ω–µ–π
      totalStaked: BigInt(5000000000000000), // 5,000,000 TNG
      maxCapacity: BigInt(50000000000000000), // 50,000,000 TNG
      isActive: true,
      isRecommended: true,
      riskLevel: 'LOW' as const
    },
    {
      name: 'TNG-SOL LP –°—Ç–µ–π–∫–∏–Ω–≥',
      description: '–°—Ç–µ–π–∫–∏–Ω–≥ LP —Ç–æ–∫–µ–Ω–æ–≤ –ø–∞—Ä—ã TNG-SOL —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º APY',
      tokenMint: 'LP_TNG_SOL_MOCK', // –ú–æ–∫ –∞–¥—Ä–µ—Å LP —Ç–æ–∫–µ–Ω–∞
      rewardMint: process.env.TNG_MINT_ADDRESS || 'FMACx4PexHrMux1j2RLHW6fBc5PuCrzi2LV7bEqUKygs',
      apy: 28.7, // 28.7% –≥–æ–¥–æ–≤—ã—Ö –∑–∞ —Ä–∏—Å–∫
      minimumStake: BigInt(1000000000000), // 1,000 TNG —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
      lockupPeriod: 0, // –ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      totalStaked: BigInt(800000000000000), // 800,000 TNG —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
      maxCapacity: BigInt(10000000000000000), // 10,000,000 TNG —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
      isActive: true,
      isRecommended: false,
      riskLevel: 'MEDIUM' as const
    }
  ]

  for (const poolData of stakingPools) {
    await prisma.stakingPool.create({
      data: poolData
    })
  }

  // Lending –ø—É–ª—ã
  const lendingPools = [
    {
      name: 'TNG Lending Pool',
      symbol: 'lTNG',
      description: '–ü—É–ª –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è –∏ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è TNG —Ç–æ–∫–µ–Ω–æ–≤',
      tokenMint: process.env.TNG_MINT_ADDRESS || 'FMACx4PexHrMux1j2RLHW6fBc5PuCrzi2LV7bEqUKygs',
      tokenSymbol: 'TNG',
      tokenDecimals: 9,
      totalSupply: BigInt(2000000000000000), // 2,000,000 TNG
      totalBorrowed: BigInt(400000000000000), // 400,000 TNG
      supplyApy: 8.5, // 8.5% –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
      borrowApy: 12.0, // 12% –¥–ª—è –∑–∞–µ–º—â–∏–∫–æ–≤
      utilizationRate: 20.0, // 20% —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è
      ltv: 75.0, // 75% LTV
      liquidationThreshold: 85.0, // 85% –ø–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
      isActive: true,
      isPaused: false
    },
    {
      name: 'SOL Lending Pool',
      symbol: 'lSOL',
      description: '–ü—É–ª –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è –∏ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è SOL',
      tokenMint: 'So11111111111111111111111111111111111111112', // Wrapped SOL
      tokenSymbol: 'SOL',
      tokenDecimals: 9,
      totalSupply: BigInt(50000000000), // 50 SOL
      totalBorrowed: BigInt(15000000000), // 15 SOL
      supplyApy: 5.2, // 5.2% –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      borrowApy: 8.8, // 8.8% –¥–ª—è –∑–∞–µ–º—â–∏–∫–æ–≤
      utilizationRate: 30.0, // 30% —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è
      ltv: 70.0, // 70% LTV
      liquidationThreshold: 80.0, // 80% –ø–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
      isActive: true,
      isPaused: false
    }
  ]

  for (const poolData of lendingPools) {
    await prisma.lendingPool.create({
      data: poolData
    })
  }

  // Farming –ø—É–ª—ã
  const farmingPools = [
    {
      name: 'TNG-SOL Farm',
      description: '–§–∞—Ä–º–∏–Ω–≥ –ø—É–ª –¥–ª—è –ø–∞—Ä—ã TNG-SOL —Å –≤—ã—Å–æ–∫–∏–º APY',
      tokenAMint: process.env.TNG_MINT_ADDRESS || 'FMACx4PexHrMux1j2RLHW6fBc5PuCrzi2LV7bEqUKygs',
      tokenBMint: 'So11111111111111111111111111111111111111112',
      lpTokenMint: 'LP_TNG_SOL_MOCK',
      apy: 45.8, // 45.8% APY
      tvl: BigInt(1500000000000000), // 1.5M TNG —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
      volume24h: BigInt(75000000000000), // 75K TNG –æ–±—ä–µ–º –∑–∞ 24—á
      fees24h: BigInt(187500000000), // 187.5 TNG –∫–æ–º–∏—Å—Å–∏–π –∑–∞ 24—á
      feePercent: 0.25, // 0.25% –∫–æ–º–∏—Å—Å–∏—è
      isActive: true,
      isStable: false,
      riskLevel: 'MEDIUM' as const
    }
  ]

  for (const poolData of farmingPools) {
    await prisma.farmingPool.create({
      data: poolData
    })
  }

  console.log('‚úÖ Created Kazakhstan DeFi pools')
}

async function createAchievementsAndBadges() {
  console.log('üèÜ Creating Kazakhstan achievements and badges...')

  const systemUser = await prisma.user.findUnique({ where: { telegramId: BigInt(1) } })
  if (!systemUser) return

  // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const achievements = [
    {
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ',
      description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å –ø–æ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
      iconUrl: '/achievements/first-steps.png',
      category: 'LEARNING' as const,
      rarity: 'COMMON' as const,
      maxProgress: 1,
      xpReward: 100,
      tokenReward: 500
    },
    {
      title: '–ó–Ω–∞—Ç–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
      description: '–ò–∑—É—á–∏–ª–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –†–ö',
      iconUrl: '/achievements/crypto-expert-kz.png',
      category: 'COMPLETION' as const,
      rarity: 'UNCOMMON' as const,
      maxProgress: 1,
      xpReward: 250,
      tokenReward: 1000
    },
    {
      title: 'DeFi —ç–Ω—Ç—É–∑–∏–∞—Å—Ç',
      description: '–û—Å–≤–æ–∏–ª–∏ –≤—Å–µ DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
      iconUrl: '/achievements/defi-enthusiast.png',
      category: 'COMPLETION' as const,
      rarity: 'RARE' as const,
      maxProgress: 1,
      xpReward: 500,
      tokenReward: 2500
    },
    {
      title: 'NFT –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
      description: '–°–æ–±—Ä–∞–ª–∏ 10 NFT –∏–∑ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π',
      iconUrl: '/achievements/nft-collector.png',
      category: 'SOCIAL' as const,
      rarity: 'UNCOMMON' as const,
      maxProgress: 10,
      xpReward: 300,
      tokenReward: 1500
    },
    {
      title: '–°—Ç–µ–π–∫–∏–Ω–≥ –º–∞—Å—Ç–µ—Ä',
      description: '–ó–∞—Å—Ç–µ–π–∫–∞–ª–∏ –±–æ–ª–µ–µ 100,000 TNG —Ç–æ–∫–µ–Ω–æ–≤',
      iconUrl: '/achievements/staking-master.png',
      category: 'COMPLETION' as const,
      rarity: 'EPIC' as const,
      maxProgress: 1,
      xpReward: 1000,
      tokenReward: 5000
    }
  ]

  for (const achievement of achievements) {
    await prisma.achievement.create({
      data: {
        ...achievement,
        userId: systemUser.id
      }
    })
  }

  // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–∫–∏
  const badges = [
    {
      title: '–ù–æ–≤–∏—á–æ–∫',
      description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–ª–∏ –∫–æ—à–µ–ª–µ–∫',
      imageUrl: '/badges/newcomer.png',
      category: 'COMPLETION' as const,
      rarity: 'COMMON' as const,
      maxProgress: 1,
      progress: 1,
      xpReward: 50,
      tokenReward: 100
    },
    {
      title: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏',
      description: '–ò–∑—É—á–∞–ª–∏ –∫—É—Ä—Å—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      imageUrl: '/badges/student-of-week.png',
      category: 'STREAK' as const,
      rarity: 'UNCOMMON' as const,
      maxProgress: 7,
      progress: 7,
      xpReward: 200,
      tokenReward: 750
    },
    {
      title: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –ø–∞—Ç—Ä–∏–æ—Ç',
      description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∫—É—Ä—Å—ã –æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
      imageUrl: '/badges/kz-patriot.png',
      category: 'SPECIAL' as const,
      rarity: 'RARE' as const,
      maxProgress: 1,
      progress: 1,
      xpReward: 400,
      tokenReward: 2000
    }
  ]

  for (const badge of badges) {
    await prisma.badge.create({
      data: {
        ...badge,
        userId: systemUser.id
      }
    })
  }

  console.log('‚úÖ Created Kazakhstan achievements and badges')
}

async function createTestUsers() {
  console.log('üë• Creating test users...')

  const testUsers = [
    {
      telegramId: BigInt(12345001),
      username: 'aidar_almaty',
      firstName: '–ê–π–¥–∞—Ä',
      lastName: '–¢–æ–∫—Ç–∞—Ä–æ–≤',
      languageCode: 'kk',
      isPremium: false
    },
    {
      telegramId: BigInt(12345002),
      username: 'dana_astana',
      firstName: '–î–∞–Ω–∞',
      lastName: '–ù—É—Ä—Å—É–ª—Ç–∞–Ω–æ–≤–∞', 
      languageCode: 'ru',
      isPremium: true
    },
    {
      telegramId: BigInt(12345003),
      username: 'arman_shymkent',
      firstName: '–ê—Ä–º–∞–Ω',
      lastName: '–ö–∞–∑—ã–±–µ–∫–æ–≤',
      languageCode: 'ru',
      isPremium: false
    }
  ]

  for (const userData of testUsers) {
    await prisma.user.create({
      data: userData
    })
  }

  console.log('‚úÖ Created test users')
}

async function createDAOProposals() {
  console.log('üó≥Ô∏è Creating Kazakhstan DAO proposals...')

  const systemUser = await prisma.user.findUnique({ where: { telegramId: BigInt(1) } })
  if (!systemUser) return

  const proposals = [
    {
      title: '–†–∞–∑–≤–∏—Ç–∏–µ DeFi –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
      description: '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–¥–µ–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –∫–∞–∑–Ω—ã DAO –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –º–µ—Å—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞.',
      type: 'TREASURY' as const,
      votingStartsAt: new Date(),
      votingEndsAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
      quorumRequired: BigInt(100000000000000), // 100,000 TNG
      status: 'ACTIVE' as const,
      creatorId: systemUser.id
    },
    {
      title: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–º–∏ –±–∞–Ω–∫–∞–º–∏',
      description: '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –º–µ—Å—Ç–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ blockchain —Ä–µ—à–µ–Ω–∏–π.',
      type: 'GOVERNANCE' as const,
      votingStartsAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // –∑–∞–≤—Ç—Ä–∞
      votingEndsAt: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 –¥–Ω–µ–π
      quorumRequired: BigInt(150000000000000), // 150,000 TNG
      status: 'DRAFT' as const,
      creatorId: systemUser.id
    }
  ]

  for (const proposalData of proposals) {
    await prisma.dAOProposal.create({
      data: proposalData
    })
  }

  console.log('‚úÖ Created Kazakhstan DAO proposals')
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
