/**
 * Additional Content Seed Script - Kazakhstan Edition
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: –∫–≤–∏–∑—ã, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏, –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏
 * Solana SuperApp
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üìù Creating additional Kazakhstan content...')

  try {
    await createDetailedLessonsWithQuizzes()
    await createDailyChallenges()
    await createCertificateTemplates()
    await createLeaderboardEntries()
    
    console.log('‚úÖ Additional Kazakhstan content created successfully!')
  } catch (error) {
    console.error('‚ùå Error creating additional content:', error)
    throw error
  }
}

async function createDetailedLessonsWithQuizzes() {
  console.log('üìö Creating detailed lessons with quizzes...')

  // –ù–∞–π–¥–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Ä—Å—ã
  const blockchainCourse = await prisma.course.findUnique({
    where: { id: 'course-blockchain-kz-basics' },
    include: { lessons: true }
  })

  if (!blockchainCourse) return

  // –î–æ–±–∞–≤–∏–º –∫–≤–∏–∑—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–∫–∞–º
  for (const lesson of blockchainCourse.lessons) {
    const quiz = await prisma.quiz.create({
      data: {
        lessonId: lesson.id,
        title: `–ö–≤–∏–∑: ${lesson.title}`,
        description: `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ "${lesson.title}"`,
        timeLimit: 600, // 10 –º–∏–Ω—É—Ç
        passingScore: 70,
        attemptsAllowed: 3,
        xpReward: 25,
        tokenReward: 50
      }
    })

    // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω
    if (lesson.title.includes('–í–≤–µ–¥–µ–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω')) {
      const questions = [
        {
          type: 'MULTIPLE_CHOICE',
          question: '–ö–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ?',
          options: ['–¶–∏—Ñ—Ä–æ–≤–æ–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω 2050', '–ù—É—Ä–ª—ã –∂–æ–ª', '–ë–æ–ª–∞—à–∞–∫'],
          correctAnswer: '–¶–∏—Ñ—Ä–æ–≤–æ–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
          explanation: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ "–¶–∏—Ñ—Ä–æ–≤–æ–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω" –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ IT –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —Å—Ç—Ä–∞–Ω–µ.',
          points: 10,
          order: 1
        },
        {
          type: 'TRUE_FALSE',
          question: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ —è–≤–ª—è—é—Ç—Å—è –∑–∞–∫–æ–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –ø–ª–∞—Ç–µ–∂–∞',
          options: ['–î–∞', '–ù–µ—Ç'],
          correctAnswer: '–ù–µ—Ç',
          explanation: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ù–ï —è–≤–ª—è—é—Ç—Å—è –∑–∞–∫–æ–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –ø–ª–∞—Ç–µ–∂–∞ –≤ –†–ö, –Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∫–∞–∫ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã.',
          points: 10,
          order: 2
        },
        {
          type: 'MULTIPLE_CHOICE',
          question: '–ö–∞–∫–æ–µ –≤–µ–¥–æ–º—Å—Ç–≤–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ?',
          options: ['–ù–ë–†–ö', '–ê–§–†–ö', '–ú–∏–Ω—Ñ–∏–Ω', '–ú–∏–Ω—ç–Ω–µ—Ä–≥–æ'],
          correctAnswer: '–ê–§–†–ö',
          explanation: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –†–ö –ø–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ (–ê–§–†–ö) –≤—ã–¥–∞–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏ –∫—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω–Ω–∏–∫–∞–º.',
          points: 15,
          order: 3
        }
      ]

      for (const questionData of questions) {
        await prisma.quizQuestion.create({
          data: {
            quizId: quiz.id,
            ...questionData
          }
        })
      }
    }

    // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Ç–µ–Ω–≥–µ
    if (lesson.title.includes('–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–Ω–≥–µ')) {
      const questions = [
        {
          type: 'MULTIPLE_CHOICE',
          question: '–ß—Ç–æ —Ç–∞–∫–æ–µ CBDC?',
          options: [
            '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –±–∏—Ä–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤',
            '–¶–∏—Ñ—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞', 
            '–ë–ª–æ–∫—á–µ–π–Ω –¥–ª—è –±–∞–Ω–∫–æ–≤',
            '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞'
          ],
          correctAnswer: '–¶–∏—Ñ—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞',
          explanation: 'CBDC (Central Bank Digital Currency) - —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞.',
          points: 10,
          order: 1
        },
        {
          type: 'TRUE_FALSE',
          question: '–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–Ω–≥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –±–ª–æ–∫—á–µ–π–Ω–µ',
          options: ['–î–∞', '–ù–µ—Ç'],
          correctAnswer: '–ù–µ—Ç',
          explanation: '–¶–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–Ω–≥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ù–ë–†–ö.',
          points: 10,
          order: 2
        }
      ]

      for (const questionData of questions) {
        await prisma.quizQuestion.create({
          data: {
            quizId: quiz.id,
            ...questionData
          }
        })
      }
    }
  }

  // –°–æ–∑–¥–∞–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏
  const additionalLessons = [
    {
      courseId: 'course-blockchain-kz-basics',
      title: '–ü—Ä–∞–∫—Ç–∏–∫–∞: –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞',
      description: '–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
      type: 'PRACTICAL',
      order: 4,
      duration: 45,
      content: `# –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ

## –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
- **MetaMask** - –¥–ª—è Ethereum –∏ EVM —Å–µ—Ç–µ–π
- **Phantom** - –¥–ª—è Solana –±–ª–æ–∫—á–µ–π–Ω–∞
- **Trust Wallet** - –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫

## –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ (–Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ)
3. –ó–∞–ø–∏—à–∏—Ç–µ seed-—Ñ—Ä–∞–∑—É –Ω–∞ –±—É–º–∞–≥–µ
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π PIN-–∫–æ–¥

## –®–∞–≥ 3: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å seed-—Ñ—Ä–∞–∑–æ–π
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
- –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
- –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é

## –®–∞–≥ 4: –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω–∏–∫
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Å—É–º–º—É
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –≤—Ä–µ–º—è
4. –ò–∑—É—á–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

## –í–∞–∂–Ω–æ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞:
- –í–µ–¥–∏—Ç–µ —É—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–º–µ–Ω–Ω–∏–∫–∏
- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã –≤–∞–ª—é—Ç–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞`,
      xpReward: 100,
      tokenReward: 200
    },
    {
      courseId: 'course-defi-kz',
      title: 'DeFi —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Ü–µ–≤',
      description: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ DeFi —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ä–∏—Å–∫–æ–≤.',
      type: 'TEXT',
      order: 1,
      duration: 60,
      content: `# DeFi —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞

## 1. –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)
**–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 5-12% –≥–æ–¥–æ–≤—ã—Ö**
- –°—Ç–µ–π–∫–∏–Ω–≥ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (USDC, USDT)
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—É–ª—ã
- Lending —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö

**–ü–ª—é—Å—ã:**
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø–æ—Ç–µ—Ä—å
- –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

**–ú–∏–Ω—É—Å—ã:**
- –ù–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
- –ò–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞

## 2. –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫)
**–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 15-35% –≥–æ–¥–æ–≤—ã—Ö**
- –°—Ç–µ–π–∫–∏–Ω–≥ —Ç–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (ETH, SOL)
- –§–∞—Ä–º–∏–Ω–≥ –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—É–ª–∞—Ö
- –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏

**–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:**
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—ã—Ç–æ–º –≤ –∫—Ä–∏–ø—Ç–æ
- –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
- –¢–µ—Ö, –∫—Ç–æ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏

## 3. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
**–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 50-200%+ –≥–æ–¥–æ–≤—ã—Ö**
- –§–∞—Ä–º–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
- –£—á–∞—Å—Ç–∏–µ –≤ –ª–∏–∫–≤–∏–¥–∏—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–µ
- –ê—Ä–±–∏—Ç—Ä–∞–∂ –º–µ–∂–¥—É DEX

**–†–∏—Å–∫–∏:**
- –ò–º–ø–µ—Ä–º–∞–º–µ–Ω—Ç–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
- –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∏—Å–∫–∏
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤

## –ù–∞–ª–æ–≥–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ:
- –ò–ü–ù 10% —Å –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏
- –£—á–µ—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ö–ì–î
- –î–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ —Å–≤—ã—à–µ 20 –ú–†–ü`,
      xpReward: 150,
      tokenReward: 300
    }
  ]

  for (const lessonData of additionalLessons) {
    await prisma.lesson.create({
      data: lessonData
    })
  }

  console.log('‚úÖ Created detailed lessons with quizzes')
}

async function createDailyChallenges() {
  console.log('üéØ Creating daily challenges...')

  const challenges = [
    {
      title: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
      description: '–ò–∑—É—á–∞–π—Ç–µ —É—Ä–æ–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã',
      type: 'LESSON_COMPLETION',
      target: 1, // 1 —É—Ä–æ–∫ –≤ –¥–µ–Ω—å
      xpReward: 25,
      tokenReward: 50,
      isActive: true,
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
    },
    {
      title: '–ó–Ω–∞—Ç–æ–∫ –∫–≤–∏–∑–æ–≤',
      description: '–ù–∞–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ 80% –≤ –ª—é–±–æ–º –∫–≤–∏–∑–µ',
      type: 'QUIZ_SCORE',
      target: 80, // 80% —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      xpReward: 50,
      tokenReward: 100,
      isActive: true,
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
    },
    {
      title: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü –æ–±—É—á–µ–Ω–∏—è',
      description: '–ò–∑—É—á–∞–π—Ç–µ –∫—É—Ä—Å—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      type: 'STREAK',
      target: 7, // 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
      xpReward: 200,
      tokenReward: 500,
      badgeReward: 'streak_7_days',
      isActive: true,
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
    },
    {
      title: '–ß–∞—Å –∑–Ω–∞–Ω–∏–π',
      description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 60 –º–∏–Ω—É—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å',
      type: 'TIME_SPENT',
      target: 60, // 60 –º–∏–Ω—É—Ç
      xpReward: 75,
      tokenReward: 150,
      isActive: true,
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
    },
    {
      title: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç',
      description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∫—É—Ä—Å—ã –æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
      type: 'LESSON_COMPLETION',
      target: 15, // –≤—Å–µ —É—Ä–æ–∫–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤
      xpReward: 500,
      tokenReward: 2500,
      badgeReward: 'kazakhstan_expert',
      isActive: true,
      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 –¥–Ω–µ–π
    }
  ]

  for (const challengeData of challenges) {
    await prisma.dailyChallenge.create({
      data: challengeData
    })
  }

  console.log('‚úÖ Created daily challenges')
}

async function createCertificateTemplates() {
  console.log('üèÜ Creating certificate templates...')

  // –ü–æ–ª—É—á–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å—ã
  const systemUser = await prisma.user.findUnique({ where: { telegramId: BigInt(1) } })
  const courses = await prisma.course.findMany({ take: 3 })

  if (!systemUser || courses.length === 0) return

  // –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  for (const course of courses) {
    await prisma.certificate.create({
      data: {
        userId: systemUser.id,
        courseId: course.id,
        title: `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É—Ä—Å–∞: ${course.title}`,
        description: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ "${course.title}" –≤ Solana SuperApp`,
        verificationUrl: `https://solana-superapp.kz/verify/${course.id}/${systemUser.id}`,
        imageUrl: `/certificates/${course.id}-template.png`,
        skills: [
          '–ë–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
          '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
          '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å',
          '–¶–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã'
        ],
        grade: '–û—Ç–ª–∏—á–Ω–æ',
        isVerified: true,
        issueDate: new Date()
      }
    })
  }

  console.log('‚úÖ Created certificate templates')
}

async function createLeaderboardEntries() {
  console.log('üèÖ Creating leaderboard entries...')

  // –ü–æ–ª—É—á–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const testUsers = await prisma.user.findMany({
    where: {
      telegramId: {
        gte: BigInt(12345000)
      }
    }
  })

  if (testUsers.length === 0) return

  // –°–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const [index, user] of testUsers.entries()) {
    const baseXp = 1000 - (index * 200) // –£–±—ã–≤–∞—é—â–∏–π XP
    const baseTokens = 5000 - (index * 1000) // –£–±—ã–≤–∞—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã

    // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    await prisma.leaderboard.create({
      data: {
        userId: user.id,
        category: null, // –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        totalXp: baseXp,
        totalTokens: baseTokens,
        coursesCompleted: 3 - index,
        currentStreak: 7 - index,
        longestStreak: 15 - (index * 2),
        globalRank: index + 1,
        categoryRank: null
      }
    })

    // –†–µ–π—Ç–∏–Ω–≥ –ø–æ –±–ª–æ–∫—á–µ–π–Ω—É
    await prisma.leaderboard.create({
      data: {
        userId: user.id,
        category: 'BLOCKCHAIN',
        totalXp: Math.floor(baseXp * 0.6),
        totalTokens: Math.floor(baseTokens * 0.6),
        coursesCompleted: 2 - Math.min(index, 1),
        currentStreak: 5 - index,
        longestStreak: 10 - index,
        globalRank: null,
        categoryRank: index + 1
      }
    })

    // –†–µ–π—Ç–∏–Ω–≥ –ø–æ DeFi
    await prisma.leaderboard.create({
      data: {
        userId: user.id,
        category: 'DEFI',
        totalXp: Math.floor(baseXp * 0.4),
        totalTokens: Math.floor(baseTokens * 0.4),
        coursesCompleted: 1 - Math.min(index, 1),
        currentStreak: 3 - Math.min(index, 2),
        longestStreak: 8 - index,
        globalRank: null,
        categoryRank: index + 1
      }
    })
  }

  console.log('‚úÖ Created leaderboard entries')
}

main()
  .catch((e) => {
    console.error('‚ùå Additional content seeding failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
