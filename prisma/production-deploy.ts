/**
 * Production Deployment Script - Kazakhstan Edition
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
 * Solana SuperApp
 */

import { PrismaClient } from '@prisma/client'
import { execSync } from 'child_process'
import * as path from 'path'
import * as fs from 'fs'

const prisma = new PrismaClient()

async function main() {
  console.log('üöÄ Starting production deployment for Kazakhstan...')
  console.log('=' .repeat(60))

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await checkDatabaseConnection()
    
    // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    await runMigrations()
    
    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π seed
    await runMainSeed()
    
    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    await runAdditionalContent()
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await verifyDeployment()
    
    console.log('=' .repeat(60))
    console.log('‚úÖ Production deployment completed successfully!')
    console.log('üá∞üáø Kazakhstan Solana SuperApp is ready for production!')
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error)
    process.exit(1)
  }
}

async function checkDatabaseConnection() {
  console.log('üîå Checking database connection...')
  
  try {
    await prisma.$connect()
    await prisma.$queryRaw`SELECT 1 as connected`
    console.log('‚úÖ Database connection successful')
  } catch (error) {
    console.error('‚ùå Database connection failed:', error)
    throw new Error('Cannot connect to database')
  }
}

async function runMigrations() {
  console.log('üì¶ Running Prisma migrations...')
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma client
    console.log('  üìù Generating Prisma client...')
    execSync('npx prisma generate', { stdio: 'inherit' })
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('  üîÑ Applying database migrations...')
    execSync('npx prisma migrate deploy', { stdio: 'inherit' })
    
    console.log('‚úÖ Migrations completed successfully')
  } catch (error) {
    console.error('‚ùå Migration failed:', error)
    throw new Error('Migration process failed')
  }
}

async function runMainSeed() {
  console.log('üå± Running main Kazakhstan seed...')
  
  try {
    const seedPath = path.join(process.cwd(), 'prisma', 'seed-production-kazakhstan.ts')
    
    if (!fs.existsSync(seedPath)) {
      throw new Error('Main seed file not found')
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π seed
    execSync('npx tsx prisma/seed-production-kazakhstan.ts', { 
      stdio: 'inherit',
      env: { ...process.env, NODE_ENV: 'production' }
    })
    
    console.log('‚úÖ Main seed completed successfully')
  } catch (error) {
    console.error('‚ùå Main seed failed:', error)
    throw new Error('Main seeding process failed')
  }
}

async function runAdditionalContent() {
  console.log('üìö Running additional content seed...')
  
  try {
    const additionalSeedPath = path.join(process.cwd(), 'prisma', 'seed-additional-content.ts')
    
    if (!fs.existsSync(additionalSeedPath)) {
      console.log('‚ö†Ô∏è Additional content seed file not found, skipping...')
      return
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    execSync('npx tsx prisma/seed-additional-content.ts', { 
      stdio: 'inherit',
      env: { ...process.env, NODE_ENV: 'production' }
    })
    
    console.log('‚úÖ Additional content seed completed successfully')
  } catch (error) {
    console.error('‚ùå Additional content seed failed:', error)
    // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è
    console.log('‚ö†Ô∏è Continuing deployment without additional content...')
  }
}

async function verifyDeployment() {
  console.log('üîç Verifying deployment...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    const stats = await getDeploymentStats()
    
    console.log('üìä Deployment Statistics:')
    console.log(`  Users: ${stats.users}`)
    console.log(`  Courses: ${stats.courses}`)
    console.log(`  Lessons: ${stats.lessons}`)
    console.log(`  NFT Collections: ${stats.nftCollections}`)
    console.log(`  NFTs: ${stats.nfts}`)
    console.log(`  Jobs: ${stats.jobs}`)
    console.log(`  Staking Pools: ${stats.stakingPools}`)
    console.log(`  Lending Pools: ${stats.lendingPools}`)
    console.log(`  Achievements: ${stats.achievements}`)
    console.log(`  Daily Challenges: ${stats.dailyChallenges}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const requirements = [
      { name: 'Courses', value: stats.courses, minimum: 3 },
      { name: 'Lessons', value: stats.lessons, minimum: 5 },
      { name: 'Staking Pools', value: stats.stakingPools, minimum: 2 },
      { name: 'Lending Pools', value: stats.lendingPools, minimum: 2 }
    ]
    
    for (const req of requirements) {
      if (req.value < req.minimum) {
        throw new Error(`Insufficient ${req.name}: ${req.value} < ${req.minimum}`)
      }
    }
    
    console.log('‚úÖ Deployment verification passed')
    
  } catch (error) {
    console.error('‚ùå Deployment verification failed:', error)
    throw new Error('Deployment verification failed')
  }
}

async function getDeploymentStats() {
  const [
    users,
    courses, 
    lessons,
    nftCollections,
    nfts,
    jobs,
    stakingPools,
    lendingPools,
    achievements,
    dailyChallenges
  ] = await Promise.all([
    prisma.user.count(),
    prisma.course.count(),
    prisma.lesson.count(),
    prisma.nFTCollection.count(),
    prisma.nFT.count(),
    prisma.job.count(),
    prisma.stakingPool.count(),
    prisma.lendingPool.count(),
    prisma.achievement.count(),
    prisma.dailyChallenge.count()
  ])

  return {
    users,
    courses,
    lessons, 
    nftCollections,
    nfts,
    jobs,
    stakingPools,
    lendingPools,
    achievements,
    dailyChallenges
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüõë Deployment interrupted by user')
  await prisma.$disconnect()
  process.exit(0)
})

process.on('SIGTERM', async () => {
  console.log('\nüõë Deployment terminated')
  await prisma.$disconnect()
  process.exit(0)
})

main()
  .catch(async (e) => {
    console.error('üí• Fatal deployment error:', e)
    await prisma.$disconnect()
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
