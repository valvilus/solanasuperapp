/**
 * DeFi Swap API
 * GET/POST /api/defi/swap
 * Solana SuperApp
 */

import { NextRequest, NextResponse } from 'next/server'
import { Connection, PublicKey } from '@solana/web3.js'
import { SwapService } from '@/lib/onchain/swap.service'
import { CustodialWalletService } from '@/lib/wallet'
import { withAuth } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import TokenBalanceCache from '@/lib/optimized/TokenBalanceCache'

// GET /api/defi/swap - Get swap data (quotes, supported tokens, balances)
export const GET = withAuth(async (request: NextRequest, auth: { userId: string; telegramId: string }) => {
  try {

    const userId = auth.userId

    const { searchParams } = new URL(request.url)
    const operation = searchParams.get('operation')
    const inputMint = searchParams.get('inputMint')
    const outputMint = searchParams.get('outputMint')
    const amount = searchParams.get('amount')
    const slippage = searchParams.get('slippage')

    // Initialize services
    const connection = new Connection(
      process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com',
      'confirmed'
    )
    const swapService = new SwapService(connection)
    const walletService = new CustodialWalletService(prisma)

    // Get user wallet
    const walletResult = await walletService.getOrCreateUserWallet(userId)
    if (!walletResult.success || !walletResult.data) {
      return NextResponse.json(
        { error: '–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω', code: 'WALLET_NOT_FOUND' },
        { status: 404 }
      )
    }

    const userWallet = walletResult.data
    const userPublicKey = new PublicKey(userWallet.publicKey)

    switch (operation) {
      case 'quote': {
        if (!inputMint || !outputMint || !amount) {
          return NextResponse.json(
            { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏', code: 'MISSING_QUOTE_PARAMS' },
            { status: 400 }
          )
        }

        const slippageBps = slippage ? parseInt(slippage) : 50
        const quoteResult = await swapService.getSwapQuote(inputMint, outputMint, amount, slippageBps)

        if (!quoteResult.success) {
          return NextResponse.json(
            {
              error: quoteResult.error?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏',
              code: 'QUOTE_ERROR'
            },
            { status: 500 }
          )
        }

        return NextResponse.json({
          success: true,
          data: {
            operation: 'quote',
            quote: quoteResult.data
          },
          message: '–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        })
      }

      case 'tokens': {
        const tokensResult = await swapService.getSupportedTokens()

        if (!tokensResult.success) {
          return NextResponse.json(
            {
              error: tokensResult.error?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤',
              code: 'TOKENS_ERROR'
            },
            { status: 500 }
          )
        }

        return NextResponse.json({
          success: true,
          data: {
            operation: 'tokens',
            tokens: tokensResult.data
          },
          message: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
        })
      }

      case 'balances': {
        const tokensResult = await swapService.getSupportedTokens()
        if (!tokensResult.success || !tokensResult.data) {
          return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤', code: 'TOKENS_ERROR' },
            { status: 500 }
          )
        }

        const balances: Record<string, string> = {}
        
        for (const token of tokensResult.data) {
          const balanceResult = await swapService.getTokenBalance(userPublicKey, token.mint)
          if (balanceResult.success && balanceResult.data) {
            balances[token.mint] = balanceResult.data
          } else {
            balances[token.mint] = '0'
          }
        }

        return NextResponse.json({
          success: true,
          data: {
            operation: 'balances',
            balances
          },
          message: '–ë–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
        })
      }

      case 'prices': {
        const pricesResult = await swapService.getTokenPrices()

        if (!pricesResult.success) {
          return NextResponse.json(
            {
              error: pricesResult.error?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω',
              code: 'PRICES_ERROR'
            },
            { status: 500 }
          )
        }

        return NextResponse.json({
          success: true,
          data: {
            operation: 'prices',
            prices: pricesResult.data
          },
          message: '–¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
        })
      }

      default: {
        const [tokensResult, pricesResult] = await Promise.all([
          swapService.getSupportedTokens(),
          swapService.getTokenPrices()
        ])

        const data: any = {
          tokens: tokensResult.success ? tokensResult.data : [],
          prices: pricesResult.success ? pricesResult.data : {}
        }

        if (tokensResult.success && tokensResult.data) {
          const balances: Record<string, string> = {}
          
          for (const token of tokensResult.data) {
            const balanceResult = await swapService.getTokenBalance(userPublicKey, token.mint)
            if (balanceResult.success && balanceResult.data) {
              balances[token.mint] = balanceResult.data
            } else {
              balances[token.mint] = '0'
            }
          }
          
          data.balances = balances
        }

        return NextResponse.json({
          success: true,
          data,
          message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
        })
      }
    }

  } catch (error) {
    
    return NextResponse.json(
      {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        code: 'INTERNAL_ERROR',
        timestamp: new Date().toISOString(),
        debug: process.env.NODE_ENV === 'development' 
          ? error instanceof Error ? error.message : String(error) 
          : undefined
      },
      { status: 500 }
    )
  }
})

// POST /api/defi/swap - Execute token swap
export const POST = withAuth(async (request: NextRequest, auth: { userId: string; telegramId: string }) => {
  try {

    const userId = auth.userId

    // Parse request body
    const body = await request.json()
    const { inputMint, outputMint, amount, slippageBps } = body


    if (!inputMint || !outputMint || !amount) {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (inputMint, outputMint, amount)', code: 'MISSING_PARAMETERS' },
        { status: 400 }
      )
    }

    if (parseFloat(amount) <= 0) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞', code: 'INVALID_AMOUNT' },
        { status: 400 }
      )
    }

    // Initialize services
    const connection = new Connection(
      process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com',
      'confirmed'
    )
    const swapService = new SwapService(connection)
    const walletService = new CustodialWalletService(prisma)

    // Get user wallet and keypair
    const walletResult = await walletService.getOrCreateUserWallet(userId)
    if (!walletResult.success || !walletResult.data) {
      return NextResponse.json(
        { error: '–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω', code: 'WALLET_NOT_FOUND' },
        { status: 404 }
      )
    }

    const userWallet = walletResult.data
    const userKeypair = await walletService.getUserKeypair(userId)
    if (!userKeypair.success || !userKeypair.data) {
      return NextResponse.json(
        { error: '–ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', code: 'KEYPAIR_NOT_FOUND' },
        { status: 404 }
      )
    }

    const keypair = userKeypair.data

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
    let balanceResult = await swapService.getTokenBalance(new PublicKey(userWallet.publicKey), inputMint)
    
    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É (blockchain latency)
    if (!balanceResult.success || !balanceResult.data) {
      console.log('‚ö†Ô∏è First balance check failed, retrying in 1s...')
      await new Promise(resolve => setTimeout(resolve, 1000))
      balanceResult = await swapService.getTokenBalance(new PublicKey(userWallet.publicKey), inputMint)
    }
    
    if (!balanceResult.success || !balanceResult.data) {
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞', code: 'BALANCE_CHECK_FAILED' },
        { status: 500 }
      )
    }

    const userBalance = BigInt(balanceResult.data)
    const requiredAmount = BigInt(amount)

    console.log(`üí∞ Balance check: available=${userBalance.toString()}, required=${requiredAmount.toString()}`)

    if (userBalance < requiredAmount) {
      const inputSymbol = inputMint === 'FMACx4PexHrMux1j2RLHW6fBc5PuCrzi2LV7bEqUKygs' ? 'TNG' : 
                          inputMint === 'So11111111111111111111111111111111111111112' ? 'SOL' : 'USDC'
      const availableFormatted = (Number(userBalance) / 1e9).toFixed(6)
      const requiredFormatted = (Number(requiredAmount) / 1e9).toFixed(6)
      
      console.log(`‚ùå Insufficient balance: ${inputSymbol} - available=${availableFormatted}, required=${requiredFormatted}`)
      
      return NextResponse.json(
        { 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${inputSymbol} —Ç–æ–∫–µ–Ω–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableFormatted}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${requiredFormatted}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å.`, 
          code: 'INSUFFICIENT_BALANCE',
          data: {
            available: userBalance.toString(),
            required: requiredAmount.toString(),
            symbol: inputSymbol
          }
        },
        { status: 400 }
      )
    }

    const swapResult = await swapService.executeSwap(
      keypair,
      inputMint,
      outputMint,
      amount,
      slippageBps || 50
    )

    if (!swapResult.success) {
      return NextResponse.json(
        {
          error: swapResult.error?.message || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞',
          code: 'SWAP_FAILED'
        },
        { status: 500 }
      )
    }

    const balanceCache = TokenBalanceCache.getInstance()
    try {
      balanceCache.clearCache(userWallet.publicKey, inputMint)
      balanceCache.clearCache(userWallet.publicKey, outputMint)
      balanceCache.clearCache(userWallet.publicKey, 'SOL')
    } catch (cacheError) {
    }

    await prisma.onchainTx.create({
      data: {
        userId,
        signature: swapResult.data!.signature,
        purpose: 'DEX_SWAP',
        status: 'CONFIRMED',
        metadata: {
          operation: 'swap',
          inputMint,
          outputMint,
          inputAmount: swapResult.data!.inputAmount,
          outputAmount: swapResult.data!.outputAmount,
          actualOutputAmount: swapResult.data!.actualOutputAmount,
          priceImpact: swapResult.data!.priceImpact,
          fee: swapResult.data!.fee,
          explorerUrl: swapResult.data!.explorerUrl
        }
      }
    })

    return NextResponse.json({
      success: true,
      data: {
        operation: 'swap',
        ...swapResult.data
      },
      message: `–£—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–Ω–æ ${SwapService.formatTokenAmount(swapResult.data!.inputAmount)} –Ω–∞ ${SwapService.formatTokenAmount(swapResult.data!.outputAmount)}`
    })

  } catch (error) {
    
    return NextResponse.json(
      {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        code: 'INTERNAL_ERROR',
        timestamp: new Date().toISOString(),
        debug: process.env.NODE_ENV === 'development' 
          ? error instanceof Error ? error.message : String(error) 
          : undefined
      },
      { status: 500 }
    )
  }
})
