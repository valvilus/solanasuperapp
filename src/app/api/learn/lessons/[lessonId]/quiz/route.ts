/**
 * Lesson Quiz API - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∏–∑–∞ —É—Ä–æ–∫–∞
 * GET /api/learn/lessons/[lessonId]/quiz - –ü–æ–ª—É—á–∏—Ç—å –∫–≤–∏–∑ —É—Ä–æ–∫–∞
 * Solana SuperApp Learn-to-Earn System
 */

import { NextRequest, NextResponse } from 'next/server'
import { QuizService } from '@/lib/learn/quiz.service'
import { optionalAuth } from '@/lib/auth'
import { ApiResponse, Quiz } from '@/lib/learn/types'

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ lessonId: string }> }
): Promise<NextResponse<ApiResponse<Quiz | null>>> {
  try {
    const auth = await optionalAuth(request)
    const { lessonId } = await params
    
    console.log('üîç Getting quiz for lesson:', lessonId)
    
    const quizResponse = await QuizService.getQuizByLessonId(lessonId, auth?.userId)

    // Debug logging —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã

    if (!quizResponse.success) {
      console.log('‚ùå Quiz not found for lesson:', lessonId)
      return NextResponse.json({
        success: false,
        error: quizResponse.error || '–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        code: 'QUIZ_NOT_FOUND'
      }, { status: 404 })
    }

    if (!quizResponse.data) {
      console.log('‚ÑπÔ∏è No quiz exists for lesson:', lessonId)
      return NextResponse.json({
        success: true,
        data: null,
        message: '–£ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –∫–≤–∏–∑–∞'
      })
    }

    const quiz = quizResponse.data
    const safeQuiz = {
      ...quiz,
      questions: quiz.questions?.map(q => ({
        ...q,
        correctAnswer: undefined // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
      })) || []
    }

    console.log('‚úÖ Quiz found for lesson:', lessonId, 'Quiz ID:', quiz.id)

    return NextResponse.json({
      success: true,
      data: safeQuiz as Quiz
    })

  } catch (error) {
    console.error('‚ùå Error getting lesson quiz:', error)
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∏–∑–∞ —É—Ä–æ–∫–∞'
    }, { status: 500 })
  }
}
