'use client'

import { useState, useEffect, useCallback } from 'react'
import { PageLayout } from '@/components/layout/PageLayout'
import { SimpleCard } from '@/components/ui/simple-card'
import { SimpleButton } from '@/components/ui/simple-button'
import { Scene3DBackground } from '@/components/3d/WalletCard3D'
import ClientOnly from '@/components/common/ClientOnly'
import { useTelegram, hapticFeedback } from '@/components/telegram/TelegramProvider'
import { useCompatibleAuth } from '@/hooks/useCompatibleAuth'
import { useNotifications } from '@/contexts/NotificationContext'
// Removed unused hooks - now using optimized useTokenBalance
// import { useAuth } from '@/contexts/AuthContext' // Removed unused
// import { AuthGuard, UserInfo } from '@/components/auth' // Removed unused
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { useBottomNavigation } from '@/components/navigation/BottomTabBar'
import { 
  Wallet, 
  ImageIcon, 
  Users, 
  GraduationCap, 
  Briefcase,
  TrendingUp,
  // Zap, // Unused
  ArrowUpRight,
  // Eye, // Unused
  Plus,
  RefreshCw
  // Coins // Unused
} from 'lucide-react'
import { motion } from 'framer-motion'
import { MainPageSkeleton } from '@/components/ui/MainPageSkeleton'
import { GlassLoader } from '@/components/ui/GlassLoader'
import { TokenLogo } from '@/components/wallet/TokenLogos'
import { formatTokenBalance, formatUSDValue } from '@/lib/formatters'
import { usePortfolioBalances } from '@/hooks/useTokenBalance'

export default function Home() {
  return (
    <ClientOnly fallback={<MainPageSkeleton />}>
      <HomeContent />
    </ClientOnly>
  )
}

function HomeContent() {
  const { isReady, initData } = useTelegram()
  const { user, login, isAuthenticated, isLoading: authLoading, apiCall } = useCompatibleAuth()
  const { navigateTo } = useBottomNavigation()
  const { showSuccess, showError } = useNotifications()
  const [isFaucetLoading, setIsFaucetLoading] = useState(false)
  
  // –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const {
    TNG,
    SOL,
    USDC,
    totalUSDValue,
    formattedTotalUSD,
    loading,
    refreshAll: refreshPortfolio
  } = usePortfolioBalances({
    cacheTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã –∫–µ—à
    autoRefresh: true, //  –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    formatType: 'visual'
  })

  // –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ (–æ–±—ä—è–≤–ª—è–µ–º –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  const handleRefreshBalances = useCallback(async () => {
    try {
      // –û—á–∏—â–∞–µ–º –∫–µ—à–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
      SOL.clearCache()
      TNG.clearCache()
      USDC.clearCache()
      
      await refreshPortfolio()
    } catch (error) {
      
    }
  }, [SOL, TNG, USDC, refreshPortfolio])

  // Auto login when Telegram is ready
  useEffect(() => {
    const performAutoLogin = async () => {
      if (isReady && initData && !isAuthenticated && !authLoading) {
        try {
          await login(initData)
        } catch (error) {
          // Silent fail for auto login
        }
      }
    }

    performAutoLogin()
  }, [isReady, initData, isAuthenticated, authLoading, login])

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –ø–æ—Å–ª–µ —Å–≤–∞–ø–∞)
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible' && isAuthenticated && user?.walletAddress) {
        handleRefreshBalances()
      }
    }

    document.addEventListener('visibilitychange', handleVisibilityChange)
    
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  }, [isAuthenticated, user?.walletAddress, handleRefreshBalances])
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ usePortfolioBalances —Å autoRefresh: true

  // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑–∑–≤—É—á–Ω–æ
  // if (!isReady || isLoading) {
  //   return (
  //     <SolanaFullScreenLoader 
  //       title="Solana SuperApp"
  //       subtitle="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ..."
  //     />
  //   )
  // }

  const handleFeatureClick = (path: string) => {
    hapticFeedback.impact('light')
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DAO - —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (path === '/dao') {
      navigateTo('/dao?tab=proposals')
    } else {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
      navigateTo(path)
    }
  }

  const handleQuickAction = async () => {
    hapticFeedback.selection()
    setIsFaucetLoading(true)
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫
      if (!user?.walletAddress) {
        console.log(' User has no wallet, creating one...')
        const walletResponse = await apiCall('/api/wallet', {
          method: 'POST'
        })
        
        if (!walletResponse.ok) {
          console.error(' Failed to create wallet')
          hapticFeedback.notification('error')
          return
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ walletAddress
        await login(initData)
      }

      // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º apiCall –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const result = await apiCall('/api/tokens/tng/faucet', {
        method: 'POST',
        body: JSON.stringify({ amount: '1000000000000' })
      })
      
      const data = await result.json()
      
      if (data.success) {
        hapticFeedback.notification('success')
        showSuccess(
          'üéâ –ü–æ–ª—É—á–µ–Ω–æ 1000 TNG!',
          '–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—à–µ–ª–µ–∫',
          4000
        )
        await handleRefreshBalances()
      } else {
        if (data.nextAvailable) {
          const nextTime = new Date(data.nextAvailable).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          })
          showError(
            '‚è∞ –§–æ—Å–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            `–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ ${nextTime}`,
            6000
          )
        } else {
          showError(
            '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Å–µ—Ç–∞',
            data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤',
            5000
          )
        }
        hapticFeedback.notification('error')
      }
    } catch (e) {
      console.error(' Faucet error:', e)
      hapticFeedback.notification('error')
    } finally {
      setIsFaucetLoading(false)
    }
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - thumb-friendly —Ä–∞–∑–º–µ—Ä—ã
  const primaryFeatures = [
    {
      id: 'wallet',
      title: '–ö–æ—à–µ–ª–µ–∫',
      subtitle: 'SOL ‚Ä¢ –¢–æ–∫–µ–Ω—ã',
      icon: Wallet,
      path: '/wallet',
      accent: 'purple',
      value: !user?.walletAddress ? 
        '–ü–æ–¥–∫–ª—é—á–∏—Ç—å' : 
        SOL.formattedBalance,
      bgGradient: 'from-solana-purple/20 to-solana-purple/5',
      requiresAuth: true
    },
    {
      id: 'nft',
      title: 'NFT',
      subtitle: '–ö–æ–ª–ª–µ–∫—Ü–∏–∏',
      icon: ImageIcon,
      path: '/nft',
      accent: 'green',
      value: '0 NFT',
      bgGradient: 'from-solana-green/20 to-solana-green/5',
      requiresAuth: true
    }
  ]

  // –í—Ç–æ—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ
  const secondaryFeatures = [
    { 
      id: 'dao', 
      title: 'DAO', 
      icon: Users, 
      path: '/dao', 
      color: 'text-solana-cyan',
      requiresAuth: true,
      locked: false
    },
    { 
      id: 'learn', 
      title: '–£—á–µ–±–∞', 
      icon: GraduationCap, 
      path: '/learn', 
      color: 'text-yellow-400',
      requiresAuth: false, // –û–±—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
      locked: false
    },
    { 
      id: 'jobs', 
      title: '–†–∞–±–æ—Ç–∞', 
      icon: Briefcase, 
      path: '/jobs', 
      color: 'text-blue-400',
      requiresAuth: true,
      locked: false
    },
    { 
      id: 'defi', 
      title: 'DeFi', 
      icon: TrendingUp, 
      path: '/defi', 
      color: 'text-orange-400',
      requiresAuth: true,
      locked: !user?.walletAddress
    }
  ]

  return (
    <ClientOnly fallback={<MainPageSkeleton />}>
      {/* 3D Background - –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –¥–ª—è –Ω–µ –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è */}
      <div className="fixed inset-0 opacity-20">
        <Scene3DBackground />
      </div>
      
      <PageLayout showBottomNav={true}>
        <div className="space-y-5 pb-safe">
          
          {/* BREATHING ROOM - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π header */}
          <motion.div
            className="px-5 pt-4 pb-2"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4 }}
          >
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-xl font-bold text-white">
                  Solana <span className="text-solana-purple">SuperApp</span>
                </h1>
                <p className="text-sm text-gray-400 mt-0.5">
                  Web3 —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞
                </p>
              </div>
                              {user?.isPremium && (
                  <Badge className="bg-gradient-to-r from-solana-purple to-solana-green text-white border-0 text-xs">
                    Premium
                  </Badge>
                )}
            </div>
          </motion.div>

          {/* –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –ò–ï–†–ê–†–•–ò–Ø - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±–∞–ª–∞–Ω—Å–∞ */}
          <motion.div
            className="px-5"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.1, duration: 0.4 }}
          >
            <SimpleCard className="p-5 border border-white/10">
              {/* User info - –∞–≤–∞—Ç–∞—Ä–∫–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å */}
              <div className="flex items-center gap-3 mb-4">
                {user && (
                  <Avatar className="w-10 h-10 ring-2 ring-solana-purple/30">
                    <AvatarImage src={user.photoUrl} />
                    <AvatarFallback className="bg-gradient-to-br from-solana-purple to-solana-green text-white text-sm font-medium">
                      {user.firstName[0]}{user.lastName?.[0] || ''}
                    </AvatarFallback>
                  </Avatar>
                )}
                <div className="flex-1">
                  <h3 className="text-white font-medium text-sm">
                    {user ? `–ü—Ä–∏–≤–µ—Ç, ${user.username || user.firstName}` : '–ö–æ—à–µ–ª–µ–∫'}
                  </h3>
                  <p className="text-xs text-gray-400">
                    –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                  </p>
                </div>
              </div>
              
              {/* –ö–û–ù–¢–†–ê–°–¢–ù–û–°–¢–¨ - —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ */}
              <div className="border-t border-white/10 pt-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <TokenLogo token="SOL" size="sm" className="text-solana-green" />
                    <span className="text-2xl font-bold text-white" suppressHydrationWarning>
                      {!user?.walletAddress ? 
                        '--' : 
                        SOL.loading ? 
                          <GlassLoader size="sm" /> : 
                          SOL.formattedBalance}
                    </span>
                  </div>
                  <div className="text-right">
                    <div className="text-xs text-gray-500" suppressHydrationWarning>
                      {!user?.walletAddress ? 
                        '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫' : 
                        loading ?
                          <GlassLoader size="xs" /> :
                          formattedTotalUSD}
                    </div>
                    <div className="flex items-center gap-2 justify-end">
                      <div className="flex items-center gap-1">
                        <TokenLogo token="TNG" size="sm" className="text-solana-cyan w-3 h-3" />
                        <span className="text-xs text-solana-cyan" suppressHydrationWarning>
                          {!user?.walletAddress ? 
                            '0 TNG' : 
                            TNG.loading ? 
                              <GlassLoader size="xs" /> : 
                              TNG.formattedBalance}
                        </span>
                      </div>
                      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å –∫–æ—à–µ–ª—å–∫–æ–º) */}
                      {user?.walletAddress && (
                        <button
                          onClick={(e) => {
                            e.preventDefault()
                            hapticFeedback.impact('light')
                            handleRefreshBalances()
                          }}
                          disabled={loading}
                          className="text-gray-400 hover:text-white disabled:opacity-50 transition-colors"
                          title="–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã"
                        >
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </SimpleCard>
          </motion.div>

          {/* THUMB-FRIENDLY - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ */}
          <motion.div
            className="px-5"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2, duration: 0.4 }}
          >
            <div className="grid grid-cols-2 gap-3">
              {primaryFeatures.map((feature, index) => (
                <motion.div
                  key={feature.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 + index * 0.1, duration: 0.3 }}
                  whileTap={{ scale: 0.96 }}
                  onClick={() => handleFeatureClick(feature.path)}
                  className="cursor-pointer touch-manipulation"
                >
                  {/* –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ - –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–µ–∫ */}
                  <SimpleCard className={`p-4 h-32 bg-gradient-to-br ${feature.bgGradient} border border-white/10 hover:border-white/20 transition-all duration-200`}>
                    <div className="flex flex-col justify-between h-full">
                      <div className="flex items-center justify-between">
                        <feature.icon className={`w-6 h-6 ${getAccentColor(feature.accent)}`} />
                        <ArrowUpRight className="w-4 h-4 text-gray-400" />
                      </div>
                      <div>
                        <h3 className="text-white font-semibold text-sm mb-1">{feature.title}</h3>
                        <div className="flex items-center gap-1 mb-2">
                          {feature.id === 'wallet' && user?.walletAddress && (
                            <>
                              <TokenLogo token="SOL" size="sm" className="w-3 h-3 text-solana-purple" />
                              <TokenLogo token="TNG" size="sm" className="w-3 h-3 text-solana-green" />
                            </>
                          )}
                          <p className="text-xs text-gray-400">{feature.subtitle}</p>
                        </div>
                        <p className={`text-xs font-medium ${getAccentColor(feature.accent)}`}>
                          {feature.value}
                        </p>
                      </div>
                    </div>
                  </SimpleCard>
                </motion.div>
              ))}
        </div>
          </motion.div>

          {/* –ë–´–°–¢–†–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π */}
          <motion.div
            className="px-5"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4, duration: 0.4 }}
          >
            <h3 className="text-sm font-medium text-gray-300 mb-3">–°–µ—Ä–≤–∏—Å—ã</h3>
            <div className="grid grid-cols-4 gap-2">
              {secondaryFeatures.map((feature, index) => (
                <motion.div
                  key={feature.id}
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.5 + index * 0.05, duration: 0.2 }}
                  whileTap={{ scale: 0.92 }}
                  onClick={() => handleFeatureClick(feature.path)}
                  className="cursor-pointer touch-manipulation"
                >
                  {/* –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ - –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Çern */}
                  <SimpleCard className="p-3 h-18 border border-white/5 hover:border-white/10 transition-all duration-150">
                    <div className="flex flex-col items-center justify-center h-full text-center">
                      <feature.icon className={`w-5 h-5 mb-1.5 ${feature.color}`} />
                      <p className="text-xs text-white font-medium">{feature.title}</p>
                    </div>
                  </SimpleCard>
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* –ò–ù–¢–£–ò–¢–ò–í–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø - —á–µ—Ç–∫–∏–π CTA */}
          <motion.div
            className="px-5"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6, duration: 0.4 }}
          >
            <SimpleCard className="p-4 border border-white/10">
              <div className="flex items-center justify-between">
                <div className="flex-1 pr-3">
                  <h3 className="text-white font-medium text-sm mb-1">–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</h3>
                  <p className="text-xs text-gray-400 leading-relaxed">–ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã</p>
                </div>
                {/* –ú–ò–ö–†–û–ê–ù–ò–ú–ê–¶–ò–ò - subtle hover/tap —ç—Ñ—Ñ–µ–∫—Ç—ã */}
                <SimpleButton
                  gradient={true}
                  size="sm"
                  className="flex items-center gap-2 touch-manipulation"
                  onClick={handleQuickAction}
                  disabled={isFaucetLoading}
                >
                  {isFaucetLoading ? (
                    <>
                      <RefreshCw className="w-4 h-4 animate-spin" />
                      –ü–æ–ª—É—á–µ–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <Plus className="w-4 h-4" />
                      –§–æ—Å–µ—Ç
                    </>
                  )}
                </SimpleButton>
              </div>
            </SimpleCard>
          </motion.div>

            </div>
      </PageLayout>
    </ClientOnly>
  )
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
function getAccentColor(accent: string): string {
  const colors = {
    purple: 'text-solana-purple',
    green: 'text-solana-green',
    cyan: 'text-solana-cyan',
    yellow: 'text-yellow-400',
    blue: 'text-blue-400',
    orange: 'text-orange-400'
  }
  return colors[accent as keyof typeof colors] || colors.purple
}